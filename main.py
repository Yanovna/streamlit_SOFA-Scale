import streamlit as st
from docx import Document
from io import BytesIO
from datetime import datetime
from scales.sofa import calculate_sofa_scores

def init_session_state():
    if 'scores' not in st.session_state:
        st.session_state.scores = {
            'respiratory': 0,
            'nervous': 0,
            'cardiovascular': 0,
            'liver': 0,
            'coagulation': 0,
            'renal': 0
        }
    if 'total_score' not in st.session_state:
        st.session_state.total_score = 0
    if 'sofa_result' not in st.session_state:
        st.session_state.sofa_result = None

def generate_report():
    doc = Document()
    doc.add_heading('–û—Ç—á—ë—Ç –ø–æ —à–∫–∞–ª–µ SOFA', level=1)
    doc.add_paragraph(f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
    doc.add_paragraph(f"–û–±—â–∏–π –±–∞–ª–ª SOFA: {st.session_state.total_score}")
    doc.add_heading("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–ª–ª–æ–≤:", level=2)

    def format_score(score):
        if score == 1:
            return f"{score} –±–∞–ª–ª"
        elif 2 <= score <= 4:
            return f"{score} –±–∞–ª–ª–∞"
        else:
            return f"{score} –±–∞–ª–ª–æ–≤"

    doc.add_paragraph(f"1. –†–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å: {format_score(st.session_state.scores['respiratory'])}")
    doc.add_paragraph(f"2. –®–∫–∞–ª–∞ –∫–æ–º—ã –ì–ª–∞–∑–≥–æ: {format_score(st.session_state.scores['nervous'])}")
    doc.add_paragraph(f"3. –°CC: {format_score(st.session_state.scores['cardiovascular'])}")
    doc.add_paragraph(f"4. –ë–∏–ª–∏—Ä—É–±–∏–Ω: {format_score(st.session_state.scores['liver'])}")
    doc.add_paragraph(f"5. –¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã: {format_score(st.session_state.scores['coagulation'])}")
    doc.add_paragraph(f"6. –ü–æ—á–µ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {format_score(st.session_state.scores['renal'])}")

    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

def show_results():
    report = generate_report()
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç (DOCX)",
        data=report,
        file_name=f"SOFA_–æ—Ç—á—ë—Ç_{datetime.now().strftime('%Y%m%d')}.docx",
        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

def main():
    st.title("–®–∫–∞–ª–∞ SOFA (Sequential Organ Failure Assessment)")
    init_session_state()

    with st.form("sofa_form"):
        params = {
            'pao2': st.slider('PaO2 (–º–º —Ä—Ç.—Å—Ç.)', 1, 250, 100),
            'fio2': st.slider('FiO2 (%)', 21, 100, 21),
            'gcs': st.slider('–®–∫–∞–ª–∞ –ì–ª–∞–∑–≥–æ', 3, 15, 15),
            'cardiovascular': st.selectbox('–°–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞',
                                       ['–ù–æ—Ä–º–∞', '–ê–î—Å—Ä < 70', '–î–æ–ø–∞–º–∏–Ω ‚â§ 5',
                                        '–î–æ–ø–∞–º–∏–Ω > 5', '–î–æ–ø–∞–º–∏–Ω > 15']),
            'bilirubin': st.slider('–ë–∏–ª–∏—Ä—É–±–∏–Ω (–º–∫–º–æ–ª—å/–ª)', 0, 400, 0),
            'platelets': st.slider('–¢—Ä–æ–º–±–æ—Ü–∏—Ç—ã (√ó10‚Åπ/–ª)', 0, 500, 0),
            'renal': st.selectbox('–ü–æ—á–µ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è',
                              ['< 110 –º–∫–º–æ–ª—å/–ª', '110-170 –º–∫–º–æ–ª—å/–ª',
                               '171-299 –º–∫–º–æ–ª—å/–ª', '300-440 –º–∫–º–æ–ª—å/–ª',
                               '> 440 –º–∫–º–æ–ª—å/–ª'])
        }

        if st.form_submit_button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â–∏–π –±–∞–ª–ª SOFA"):
            st.session_state.sofa_result = calculate_sofa_scores(params)

            if st.session_state.sofa_result:
                st.session_state.scores = st.session_state.sofa_result['scores']
                st.session_state.total_score = st.session_state.sofa_result['total']

    if st.session_state.sofa_result:
        result = st.session_state.sofa_result
        st.subheader(f"–û–±—â–∏–π –±–∞–ª–ª: {result['total']}")
        st.write(f"–î–∏–∞–≥–Ω–æ–∑: {result['diagnosis']}")
        show_results()

        if st.button("–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"):
            init_session_state()
            st.rerun()

if __name__ == "__main__":
    main()